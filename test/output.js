1m;
const one = 1m;
const plus_num_one = +1m;
const minus_num_one = -1m;
const num_13p3 = 13.3m;
const plus_num_13p3 = +13.3m;
const minus_num_13p3 = -13.3m;
const str_12p4 = 12.4m;
const plus_str_12p4 = +12.4m;
const minus_str_12p4 = -12.4m;
const str_12 = 12m;
const plus_str_12 = +12m;
const minus_str_12 = -12m;
const bigint = 1m;
const minus_bigint = -1m;
const plus_bigint = +1m;
const two = BigDecimal.add(one, one2, {
  maximumFractionDigits: 1
});
const two2args = one + one2;
const subtract = one - one2;
const multiply = one * one2;
const pow = one ** 4;
const divide = one / one;
const divideThree = BigDecimal.divide(one, one, {});
const remainder = one % one;
const isBig1 = 12.4m === 1m;
const isBig2 = 12.4m !== 1m;
const isBig3 = 12.4m < 1m;
const isBig4 = 12.4m >= 1m;
const isBig5 = 12.4m > 1m;
const isBig6 = 12.4m <= 1m;
const two2 = BigDecimal.round(50m, options);
typeof one === "bigdecimal";